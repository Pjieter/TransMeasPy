name: Python package

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:

  build:
    name: Build for (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: ['3.11', '3.12', '3.13']
        poetry-version: ['latest', 'main', '2.2']
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Python Poetry Action
        uses: abatilo/actions-poetry@v4.0.0
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: Python info
        shell: bash -e {0}
        run: |
          which python
          python --version
      - name: Install the project dependencies
        run: |
          poetry lock --no-cache --regenerate
          poetry install --all-groups
      - name: Run the automated tests (for example)
        run: poetry run pytest -v
      - name: Build the package
        run: poetry build
  lint:
    name: Linting build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12']
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Python Poetry Action
        uses: abatilo/actions-poetry@v4.0.0
        with:
          poetry-version: 2.2
      - name: Python info
        shell: bash -e {0}
        run: |
          which python
          python --version
      - name: Install the project dependencies
        run: poetry install --all-groups
      - name: Check style against standards using ruff
        run: |
          poetry run ruff check --fix
          poetry run ruff format --check
